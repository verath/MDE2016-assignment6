/*
 * generated by Xtext
 */
package org.xtext.example.assignment6.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ConfiguratorDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfiguratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configurator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfiguratorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFeaturesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFeaturesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_2_0 = (RuleCall)cFeaturesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_3_1_0 = (RuleCall)cFeaturesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGroupsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cGroupsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cGroupsGroupParserRuleCall_5_2_0 = (RuleCall)cGroupsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cGroupsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_5_3_1_0 = (RuleCall)cGroupsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Configurator:
		//	{Configurator} "Configurator" name=EString "{" ("features" "{" features+=Feature ("," features+=Feature)* "}")?
		//	("groups" "{" groups+=Group ("," groups+=Group)* "}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{Configurator} "Configurator" name=EString "{" ("features" "{" features+=Feature ("," features+=Feature)* "}")?
		//("groups" "{" groups+=Group ("," groups+=Group)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Configurator}
		public Action getConfiguratorAction_0() { return cConfiguratorAction_0; }

		//"Configurator"
		public Keyword getConfiguratorKeyword_1() { return cConfiguratorKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("features" "{" features+=Feature ("," features+=Feature)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"features"
		public Keyword getFeaturesKeyword_4_0() { return cFeaturesKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//features+=Feature
		public Assignment getFeaturesAssignment_4_2() { return cFeaturesAssignment_4_2; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_2_0() { return cFeaturesFeatureParserRuleCall_4_2_0; }

		//("," features+=Feature)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//features+=Feature
		public Assignment getFeaturesAssignment_4_3_1() { return cFeaturesAssignment_4_3_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_3_1_0() { return cFeaturesFeatureParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("groups" "{" groups+=Group ("," groups+=Group)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"groups"
		public Keyword getGroupsKeyword_5_0() { return cGroupsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//groups+=Group
		public Assignment getGroupsAssignment_5_2() { return cGroupsAssignment_5_2; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_5_2_0() { return cGroupsGroupParserRuleCall_5_2_0; }

		//("," groups+=Group)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_5_3_1() { return cGroupsAssignment_5_3_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_5_3_1_0() { return cGroupsGroupParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	SimpleFeature | IntegerFeature;
		@Override public ParserRule getRule() { return rule; }

		//SimpleFeature | IntegerFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleFeature
		public RuleCall getSimpleFeatureParserRuleCall_0() { return cSimpleFeatureParserRuleCall_0; }

		//IntegerFeature
		public RuleCall getIntegerFeatureParserRuleCall_1() { return cIntegerFeatureParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGroupTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGroupTypeGroupTypeEnumRuleCall_0_0 = (RuleCall)cGroupTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesSimpleFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFeaturesSimpleFeatureParserRuleCall_4_1_0 = (RuleCall)cFeaturesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//	groupType=GroupType name=EString "{" features+=SimpleFeature ("," features+=SimpleFeature)* "}";
		@Override public ParserRule getRule() { return rule; }

		//groupType=GroupType name=EString "{" features+=SimpleFeature ("," features+=SimpleFeature)* "}"
		public Group getGroup() { return cGroup; }

		//groupType=GroupType
		public Assignment getGroupTypeAssignment_0() { return cGroupTypeAssignment_0; }

		//GroupType
		public RuleCall getGroupTypeGroupTypeEnumRuleCall_0_0() { return cGroupTypeGroupTypeEnumRuleCall_0_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=SimpleFeature
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//SimpleFeature
		public RuleCall getFeaturesSimpleFeatureParserRuleCall_3_0() { return cFeaturesSimpleFeatureParserRuleCall_3_0; }

		//("," features+=SimpleFeature)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//features+=SimpleFeature
		public Assignment getFeaturesAssignment_4_1() { return cFeaturesAssignment_4_1; }

		//SimpleFeature
		public RuleCall getFeaturesSimpleFeatureParserRuleCall_4_1_0() { return cFeaturesSimpleFeatureParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class SimpleFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryAssignment_1.eContents().get(0);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDependenciesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDependenciesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDependenciesDependencyParserRuleCall_5_2_0 = (RuleCall)cDependenciesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cDependenciesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_5_3_1_0 = (RuleCall)cDependenciesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFeaturesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFeaturesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_2_0 = (RuleCall)cFeaturesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_3_1_0 = (RuleCall)cFeaturesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGroupsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cGroupsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cGroupsGroupParserRuleCall_7_2_0 = (RuleCall)cGroupsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cGroupsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_7_3_1_0 = (RuleCall)cGroupsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SimpleFeature:
		//	{SimpleFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("dependencies" "{" dependencies+=Dependency (","
		//	dependencies+=Dependency)* "}")? ("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{"
		//	groups+=Group ("," groups+=Group)* "}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{SimpleFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("dependencies" "{" dependencies+=Dependency (","
		//dependencies+=Dependency)* "}")? ("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{"
		//groups+=Group ("," groups+=Group)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{SimpleFeature}
		public Action getSimpleFeatureAction_0() { return cSimpleFeatureAction_0; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_1() { return cMandatoryAssignment_1; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }

		//"Feature"
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("dependencies" "{" dependencies+=Dependency ("," dependencies+=Dependency)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"dependencies"
		public Keyword getDependenciesKeyword_5_0() { return cDependenciesKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_5_2() { return cDependenciesAssignment_5_2; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_5_2_0() { return cDependenciesDependencyParserRuleCall_5_2_0; }

		//("," dependencies+=Dependency)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_5_3_1() { return cDependenciesAssignment_5_3_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_5_3_1_0() { return cDependenciesDependencyParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("features" "{" features+=Feature ("," features+=Feature)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"features"
		public Keyword getFeaturesKeyword_6_0() { return cFeaturesKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//features+=Feature
		public Assignment getFeaturesAssignment_6_2() { return cFeaturesAssignment_6_2; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_2_0() { return cFeaturesFeatureParserRuleCall_6_2_0; }

		//("," features+=Feature)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//features+=Feature
		public Assignment getFeaturesAssignment_6_3_1() { return cFeaturesAssignment_6_3_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_3_1_0() { return cFeaturesFeatureParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//("groups" "{" groups+=Group ("," groups+=Group)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"groups"
		public Keyword getGroupsKeyword_7_0() { return cGroupsKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//groups+=Group
		public Assignment getGroupsAssignment_7_2() { return cGroupsAssignment_7_2; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_7_2_0() { return cGroupsGroupParserRuleCall_7_2_0; }

		//("," groups+=Group)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_7_3_1() { return cGroupsAssignment_7_3_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_7_3_1_0() { return cGroupsGroupParserRuleCall_7_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class IntegerFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryAssignment_1.eContents().get(0);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMinValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMinValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMinValueEIntParserRuleCall_5_1_0 = (RuleCall)cMinValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMaxValueKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMaxValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMaxValueEIntParserRuleCall_6_1_0 = (RuleCall)cMaxValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStepKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStepAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStepEIntParserRuleCall_7_1_0 = (RuleCall)cStepAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDependenciesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cDependenciesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDependenciesDependencyParserRuleCall_8_2_0 = (RuleCall)cDependenciesAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cDependenciesAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_8_3_1_0 = (RuleCall)cDependenciesAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cFeaturesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cFeaturesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_9_2_0 = (RuleCall)cFeaturesAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_9_3_1_0 = (RuleCall)cFeaturesAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cGroupsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cGroupsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cGroupsGroupParserRuleCall_10_2_0 = (RuleCall)cGroupsAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cGroupsAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_10_3_1_0 = (RuleCall)cGroupsAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//IntegerFeature:
		//	{IntegerFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("minValue" minValue=EInt) ("maxValue"
		//	maxValue=EInt) ("step" step=EInt) ("dependencies" "{" dependencies+=Dependency ("," dependencies+=Dependency)* "}")?
		//	("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{" groups+=Group ("," groups+=Group)*
		//	"}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{IntegerFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("minValue" minValue=EInt) ("maxValue"
		//maxValue=EInt) ("step" step=EInt) ("dependencies" "{" dependencies+=Dependency ("," dependencies+=Dependency)* "}")?
		//("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{" groups+=Group ("," groups+=Group)*
		//"}")? "}"
		public Group getGroup() { return cGroup; }

		//{IntegerFeature}
		public Action getIntegerFeatureAction_0() { return cIntegerFeatureAction_0; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_1() { return cMandatoryAssignment_1; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }

		//"Feature"
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"minValue" minValue=EInt
		public Group getGroup_5() { return cGroup_5; }

		//"minValue"
		public Keyword getMinValueKeyword_5_0() { return cMinValueKeyword_5_0; }

		//minValue=EInt
		public Assignment getMinValueAssignment_5_1() { return cMinValueAssignment_5_1; }

		//EInt
		public RuleCall getMinValueEIntParserRuleCall_5_1_0() { return cMinValueEIntParserRuleCall_5_1_0; }

		//"maxValue" maxValue=EInt
		public Group getGroup_6() { return cGroup_6; }

		//"maxValue"
		public Keyword getMaxValueKeyword_6_0() { return cMaxValueKeyword_6_0; }

		//maxValue=EInt
		public Assignment getMaxValueAssignment_6_1() { return cMaxValueAssignment_6_1; }

		//EInt
		public RuleCall getMaxValueEIntParserRuleCall_6_1_0() { return cMaxValueEIntParserRuleCall_6_1_0; }

		//"step" step=EInt
		public Group getGroup_7() { return cGroup_7; }

		//"step"
		public Keyword getStepKeyword_7_0() { return cStepKeyword_7_0; }

		//step=EInt
		public Assignment getStepAssignment_7_1() { return cStepAssignment_7_1; }

		//EInt
		public RuleCall getStepEIntParserRuleCall_7_1_0() { return cStepEIntParserRuleCall_7_1_0; }

		//("dependencies" "{" dependencies+=Dependency ("," dependencies+=Dependency)* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"dependencies"
		public Keyword getDependenciesKeyword_8_0() { return cDependenciesKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_8_2() { return cDependenciesAssignment_8_2; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_8_2_0() { return cDependenciesDependencyParserRuleCall_8_2_0; }

		//("," dependencies+=Dependency)*
		public Group getGroup_8_3() { return cGroup_8_3; }

		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_8_3_1() { return cDependenciesAssignment_8_3_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_8_3_1_0() { return cDependenciesDependencyParserRuleCall_8_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }

		//("features" "{" features+=Feature ("," features+=Feature)* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"features"
		public Keyword getFeaturesKeyword_9_0() { return cFeaturesKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//features+=Feature
		public Assignment getFeaturesAssignment_9_2() { return cFeaturesAssignment_9_2; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_9_2_0() { return cFeaturesFeatureParserRuleCall_9_2_0; }

		//("," features+=Feature)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//features+=Feature
		public Assignment getFeaturesAssignment_9_3_1() { return cFeaturesAssignment_9_3_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_9_3_1_0() { return cFeaturesFeatureParserRuleCall_9_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }

		//("groups" "{" groups+=Group ("," groups+=Group)* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"groups"
		public Keyword getGroupsKeyword_10_0() { return cGroupsKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//groups+=Group
		public Assignment getGroupsAssignment_10_2() { return cGroupsAssignment_10_2; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_10_2_0() { return cGroupsGroupParserRuleCall_10_2_0; }

		//("," groups+=Group)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_10_3_1() { return cGroupsAssignment_10_3_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_10_3_1_0() { return cGroupsGroupParserRuleCall_10_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseBinaryDependencyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsSelectedDependencyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerValueDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Value 10 -> 20 : 2
		// Dependency:
		//	BaseBinaryDependency | IsSelectedDependency | IntegerValueDependency;
		@Override public ParserRule getRule() { return rule; }

		//BaseBinaryDependency | IsSelectedDependency | IntegerValueDependency
		public Alternatives getAlternatives() { return cAlternatives; }

		//BaseBinaryDependency
		public RuleCall getBaseBinaryDependencyParserRuleCall_0() { return cBaseBinaryDependencyParserRuleCall_0; }

		//IsSelectedDependency
		public RuleCall getIsSelectedDependencyParserRuleCall_1() { return cIsSelectedDependencyParserRuleCall_1; }

		//IntegerValueDependency
		public RuleCall getIntegerValueDependencyParserRuleCall_2() { return cIntegerValueDependencyParserRuleCall_2; }
	}

	public class BaseBinaryDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseBinaryDependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryNotDependencyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryDependencyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BaseBinaryDependency returns BinaryDependency:
		//	BinaryNotDependency | BinaryDependency;
		@Override public ParserRule getRule() { return rule; }

		//BinaryNotDependency | BinaryDependency
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryNotDependency
		public RuleCall getBinaryNotDependencyParserRuleCall_0() { return cBinaryNotDependencyParserRuleCall_0; }

		//BinaryDependency
		public RuleCall getBinaryDependencyParserRuleCall_1() { return cBinaryDependencyParserRuleCall_1; }
	}

	public class BinaryNotDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryNotDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNOTKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftHandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftHandDependencyParserRuleCall_3_0 = (RuleCall)cLeftHandAssignment_3.eContents().get(0);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		private final Assignment cRightHandAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightHandDependencyParserRuleCall_5_0 = (RuleCall)cRightHandAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BinaryNotDependency returns BinaryDependency:
		//	"(" not?="NOT" "(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")" ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" not?="NOT" "(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//not?="NOT"
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }

		//"NOT"
		public Keyword getNotNOTKeyword_1_0() { return cNotNOTKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//leftHand=Dependency
		public Assignment getLeftHandAssignment_3() { return cLeftHandAssignment_3; }

		//Dependency
		public RuleCall getLeftHandDependencyParserRuleCall_3_0() { return cLeftHandDependencyParserRuleCall_3_0; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_4_0() { return cOperatorBinaryOperatorEnumRuleCall_4_0; }

		//rightHand=Dependency
		public Assignment getRightHandAssignment_5() { return cRightHandAssignment_5; }

		//Dependency
		public RuleCall getRightHandDependencyParserRuleCall_5_0() { return cRightHandDependencyParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class BinaryDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftHandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftHandDependencyParserRuleCall_1_0 = (RuleCall)cLeftHandAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightHandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightHandDependencyParserRuleCall_3_0 = (RuleCall)cRightHandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryDependency:
		//	"(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftHand=Dependency
		public Assignment getLeftHandAssignment_1() { return cLeftHandAssignment_1; }

		//Dependency
		public RuleCall getLeftHandDependencyParserRuleCall_1_0() { return cLeftHandDependencyParserRuleCall_1_0; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_2_0() { return cOperatorBinaryOperatorEnumRuleCall_2_0; }

		//rightHand=Dependency
		public Assignment getRightHandAssignment_3() { return cRightHandAssignment_3; }

		//Dependency
		public RuleCall getRightHandDependencyParserRuleCall_3_0() { return cRightHandDependencyParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IsSelectedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsSelectedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetFeatureCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetFeatureEStringParserRuleCall_1_0_1 = (RuleCall)cTargetFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cISKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNOTKeyword_3_0 = (Keyword)cNotAssignment_3.eContents().get(0);
		private final Keyword cSELECTEDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IsSelectedDependency:
		//	"(" target=[Feature|EString] "IS" not?="NOT"? "SELECTED" ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" target=[Feature|EString] "IS" not?="NOT"? "SELECTED" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//target=[Feature|EString]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[Feature|EString]
		public CrossReference getTargetFeatureCrossReference_1_0() { return cTargetFeatureCrossReference_1_0; }

		//EString
		public RuleCall getTargetFeatureEStringParserRuleCall_1_0_1() { return cTargetFeatureEStringParserRuleCall_1_0_1; }

		//"IS"
		public Keyword getISKeyword_2() { return cISKeyword_2; }

		//not?="NOT"?
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }

		//"NOT"
		public Keyword getNotNOTKeyword_3_0() { return cNotNOTKeyword_3_0; }

		//"SELECTED"
		public Keyword getSELECTEDKeyword_4() { return cSELECTEDKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IntegerValueDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValueDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetIntegerFeatureCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetIntegerFeatureEStringParserRuleCall_1_0_1 = (RuleCall)cTargetIntegerFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cISKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNOTKeyword_3_0 = (Keyword)cNotAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEIntParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntegerValueDependency:
		//	"(" target=[IntegerFeature|EString] "IS" not?="NOT"? value=EInt ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" target=[IntegerFeature|EString] "IS" not?="NOT"? value=EInt ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//target=[IntegerFeature|EString]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[IntegerFeature|EString]
		public CrossReference getTargetIntegerFeatureCrossReference_1_0() { return cTargetIntegerFeatureCrossReference_1_0; }

		//EString
		public RuleCall getTargetIntegerFeatureEStringParserRuleCall_1_0_1() { return cTargetIntegerFeatureEStringParserRuleCall_1_0_1; }

		//"IS"
		public Keyword getISKeyword_2() { return cISKeyword_2; }

		//not?="NOT"?
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }

		//"NOT"
		public Keyword getNotNOTKeyword_3_0() { return cNotNOTKeyword_3_0; }

		//value=EInt
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_4_0() { return cValueEIntParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class BinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryOperator:
		//	AND | OR;
		public EnumRule getRule() { return rule; }

		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }

		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"OR"
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}

	public class GroupTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GroupType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORInclusiveGroupKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXORExclusiveGroupKeyword_1_0 = (Keyword)cXOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GroupType:
		//	OR="Inclusive Group" | XOR="Exclusive Group";
		public EnumRule getRule() { return rule; }

		//OR="Inclusive Group" | XOR="Exclusive Group"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="Inclusive Group"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"Inclusive Group"
		public Keyword getORInclusiveGroupKeyword_0_0() { return cORInclusiveGroupKeyword_0_0; }

		//XOR="Exclusive Group"
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_1() { return cXOREnumLiteralDeclaration_1; }

		//"Exclusive Group"
		public Keyword getXORExclusiveGroupKeyword_1_0() { return cXORExclusiveGroupKeyword_1_0; }
	}
	
	private final ConfiguratorElements pConfigurator;
	private final FeatureElements pFeature;
	private final EStringElements pEString;
	private final GroupElements pGroup;
	private final EBooleanElements pEBoolean;
	private final SimpleFeatureElements pSimpleFeature;
	private final IntegerFeatureElements pIntegerFeature;
	private final DependencyElements pDependency;
	private final BaseBinaryDependencyElements pBaseBinaryDependency;
	private final BinaryNotDependencyElements pBinaryNotDependency;
	private final BinaryDependencyElements pBinaryDependency;
	private final IsSelectedDependencyElements pIsSelectedDependency;
	private final IntegerValueDependencyElements pIntegerValueDependency;
	private final BinaryOperatorElements unknownRuleBinaryOperator;
	private final EIntElements pEInt;
	private final GroupTypeElements unknownRuleGroupType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConfiguratorDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConfigurator = new ConfiguratorElements();
		this.pFeature = new FeatureElements();
		this.pEString = new EStringElements();
		this.pGroup = new GroupElements();
		this.pEBoolean = new EBooleanElements();
		this.pSimpleFeature = new SimpleFeatureElements();
		this.pIntegerFeature = new IntegerFeatureElements();
		this.pDependency = new DependencyElements();
		this.pBaseBinaryDependency = new BaseBinaryDependencyElements();
		this.pBinaryNotDependency = new BinaryNotDependencyElements();
		this.pBinaryDependency = new BinaryDependencyElements();
		this.pIsSelectedDependency = new IsSelectedDependencyElements();
		this.pIntegerValueDependency = new IntegerValueDependencyElements();
		this.unknownRuleBinaryOperator = new BinaryOperatorElements();
		this.pEInt = new EIntElements();
		this.unknownRuleGroupType = new GroupTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.assignment6.ConfiguratorDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Configurator:
	//	{Configurator} "Configurator" name=EString "{" ("features" "{" features+=Feature ("," features+=Feature)* "}")?
	//	("groups" "{" groups+=Group ("," groups+=Group)* "}")? "}";
	public ConfiguratorElements getConfiguratorAccess() {
		return pConfigurator;
	}
	
	public ParserRule getConfiguratorRule() {
		return getConfiguratorAccess().getRule();
	}

	//Feature:
	//	SimpleFeature | IntegerFeature;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Group:
	//	groupType=GroupType name=EString "{" features+=SimpleFeature ("," features+=SimpleFeature)* "}";
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//SimpleFeature:
	//	{SimpleFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("dependencies" "{" dependencies+=Dependency (","
	//	dependencies+=Dependency)* "}")? ("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{"
	//	groups+=Group ("," groups+=Group)* "}")? "}";
	public SimpleFeatureElements getSimpleFeatureAccess() {
		return pSimpleFeature;
	}
	
	public ParserRule getSimpleFeatureRule() {
		return getSimpleFeatureAccess().getRule();
	}

	//IntegerFeature:
	//	{IntegerFeature} mandatory?="mandatory"? "Feature" name=EString "{" ("minValue" minValue=EInt) ("maxValue"
	//	maxValue=EInt) ("step" step=EInt) ("dependencies" "{" dependencies+=Dependency ("," dependencies+=Dependency)* "}")?
	//	("features" "{" features+=Feature ("," features+=Feature)* "}")? ("groups" "{" groups+=Group ("," groups+=Group)*
	//	"}")? "}";
	public IntegerFeatureElements getIntegerFeatureAccess() {
		return pIntegerFeature;
	}
	
	public ParserRule getIntegerFeatureRule() {
		return getIntegerFeatureAccess().getRule();
	}

	////Value 10 -> 20 : 2
	// Dependency:
	//	BaseBinaryDependency | IsSelectedDependency | IntegerValueDependency;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//BaseBinaryDependency returns BinaryDependency:
	//	BinaryNotDependency | BinaryDependency;
	public BaseBinaryDependencyElements getBaseBinaryDependencyAccess() {
		return pBaseBinaryDependency;
	}
	
	public ParserRule getBaseBinaryDependencyRule() {
		return getBaseBinaryDependencyAccess().getRule();
	}

	//BinaryNotDependency returns BinaryDependency:
	//	"(" not?="NOT" "(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")" ")";
	public BinaryNotDependencyElements getBinaryNotDependencyAccess() {
		return pBinaryNotDependency;
	}
	
	public ParserRule getBinaryNotDependencyRule() {
		return getBinaryNotDependencyAccess().getRule();
	}

	//BinaryDependency:
	//	"(" leftHand=Dependency operator=BinaryOperator rightHand=Dependency ")";
	public BinaryDependencyElements getBinaryDependencyAccess() {
		return pBinaryDependency;
	}
	
	public ParserRule getBinaryDependencyRule() {
		return getBinaryDependencyAccess().getRule();
	}

	//IsSelectedDependency:
	//	"(" target=[Feature|EString] "IS" not?="NOT"? "SELECTED" ")";
	public IsSelectedDependencyElements getIsSelectedDependencyAccess() {
		return pIsSelectedDependency;
	}
	
	public ParserRule getIsSelectedDependencyRule() {
		return getIsSelectedDependencyAccess().getRule();
	}

	//IntegerValueDependency:
	//	"(" target=[IntegerFeature|EString] "IS" not?="NOT"? value=EInt ")";
	public IntegerValueDependencyElements getIntegerValueDependencyAccess() {
		return pIntegerValueDependency;
	}
	
	public ParserRule getIntegerValueDependencyRule() {
		return getIntegerValueDependencyAccess().getRule();
	}

	//enum BinaryOperator:
	//	AND | OR;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return unknownRuleBinaryOperator;
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//enum GroupType:
	//	OR="Inclusive Group" | XOR="Exclusive Group";
	public GroupTypeElements getGroupTypeAccess() {
		return unknownRuleGroupType;
	}
	
	public EnumRule getGroupTypeRule() {
		return getGroupTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
