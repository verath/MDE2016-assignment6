/*
 * generated by Xtext
 */
grammar InternalConfiguratorDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.assignment6.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.assignment6.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.assignment6.services.ConfiguratorDSLGrammarAccess;

}

@parser::members {

 	private ConfiguratorDSLGrammarAccess grammarAccess;
 	
    public InternalConfiguratorDSLParser(TokenStream input, ConfiguratorDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Configurator";	
   	}
   	
   	@Override
   	protected ConfiguratorDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfigurator
entryRuleConfigurator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfiguratorRule()); }
	 iv_ruleConfigurator=ruleConfigurator 
	 { $current=$iv_ruleConfigurator.current; } 
	 EOF 
;

// Rule Configurator
ruleConfigurator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfiguratorAccess().getConfiguratorAction_0(),
            $current);
    }
)	otherlv_1='Configurator' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfiguratorAccess().getConfiguratorKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConfiguratorAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='features' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfiguratorAccess().getFeaturesKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfiguratorAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorAccess().getFeaturesFeatureParserRuleCall_4_2_0()); 
	    }
		lv_features_6_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_6_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConfiguratorAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorAccess().getFeaturesFeatureParserRuleCall_4_3_1_0()); 
	    }
		lv_features_8_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_8_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConfiguratorAccess().getRightCurlyBracketKeyword_4_4());
    }
)?(	otherlv_10='groups' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConfiguratorAccess().getGroupsKeyword_5_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConfiguratorAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorAccess().getGroupsGroupParserRuleCall_5_2_0()); 
	    }
		lv_groups_12_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_12_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getConfiguratorAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfiguratorAccess().getGroupsGroupParserRuleCall_5_3_1_0()); 
	    }
		lv_groups_14_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfiguratorRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_14_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getConfiguratorAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getConfiguratorAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getSimpleFeatureParserRuleCall_0()); 
    }
    this_SimpleFeature_0=ruleSimpleFeature
    { 
        $current = $this_SimpleFeature_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getIntegerFeatureParserRuleCall_1()); 
    }
    this_IntegerFeature_1=ruleIntegerFeature
    { 
        $current = $this_IntegerFeature_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getGroupTypeGroupTypeEnumRuleCall_0_0()); 
	    }
		lv_groupType_0_0=ruleGroupType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"groupType",
        		lv_groupType_0_0, 
        		"GroupType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getFeaturesSimpleFeatureParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleSimpleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"SimpleFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getFeaturesSimpleFeatureParserRuleCall_4_1_0()); 
	    }
		lv_features_5_0=ruleSimpleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_5_0, 
        		"SimpleFeature");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_5());
    }
)
;







// Entry rule entryRuleSimpleFeature
entryRuleSimpleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleFeatureRule()); }
	 iv_ruleSimpleFeature=ruleSimpleFeature 
	 { $current=$iv_ruleSimpleFeature.current; } 
	 EOF 
;

// Rule SimpleFeature
ruleSimpleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleFeatureAccess().getSimpleFeatureAction_0(),
            $current);
    }
)(
(
		lv_mandatory_1_0=	'mandatory' 
    {
        newLeafNode(lv_mandatory_1_0, grammarAccess.getSimpleFeatureAccess().getMandatoryMandatoryKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleFeatureRule());
	        }
       		setWithLastConsumed($current, "mandatory", true, "mandatory");
	    }

)
)?	otherlv_2='Feature' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleFeatureAccess().getFeatureKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getNameEStringParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleFeatureAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='dependencies' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleFeatureAccess().getDependenciesKeyword_5_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleFeatureAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getDependenciesDependencyParserRuleCall_5_2_0()); 
	    }
		lv_dependencies_7_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_7_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleFeatureAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getDependenciesDependencyParserRuleCall_5_3_1_0()); 
	    }
		lv_dependencies_9_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_9_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleFeatureAccess().getRightCurlyBracketKeyword_5_4());
    }
)?(	otherlv_11='features' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSimpleFeatureAccess().getFeaturesKeyword_6_0());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSimpleFeatureAccess().getLeftCurlyBracketKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getFeaturesFeatureParserRuleCall_6_2_0()); 
	    }
		lv_features_13_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_13_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSimpleFeatureAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getFeaturesFeatureParserRuleCall_6_3_1_0()); 
	    }
		lv_features_15_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_15_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSimpleFeatureAccess().getRightCurlyBracketKeyword_6_4());
    }
)?(	otherlv_17='groups' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getSimpleFeatureAccess().getGroupsKeyword_7_0());
    }
	otherlv_18='{' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSimpleFeatureAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getGroupsGroupParserRuleCall_7_2_0()); 
	    }
		lv_groups_19_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_19_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getSimpleFeatureAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFeatureAccess().getGroupsGroupParserRuleCall_7_3_1_0()); 
	    }
		lv_groups_21_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_21_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getSimpleFeatureAccess().getRightCurlyBracketKeyword_7_4());
    }
)?	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getSimpleFeatureAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleIntegerFeature
entryRuleIntegerFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerFeatureRule()); }
	 iv_ruleIntegerFeature=ruleIntegerFeature 
	 { $current=$iv_ruleIntegerFeature.current; } 
	 EOF 
;

// Rule IntegerFeature
ruleIntegerFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerFeatureAccess().getIntegerFeatureAction_0(),
            $current);
    }
)(
(
		lv_mandatory_1_0=	'mandatory' 
    {
        newLeafNode(lv_mandatory_1_0, grammarAccess.getIntegerFeatureAccess().getMandatoryMandatoryKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerFeatureRule());
	        }
       		setWithLastConsumed($current, "mandatory", true, "mandatory");
	    }

)
)?	otherlv_2='Feature' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerFeatureAccess().getFeatureKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getNameEStringParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntegerFeatureAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='minValue' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIntegerFeatureAccess().getMinValueKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getMinValueEIntParserRuleCall_5_1_0()); 
	    }
		lv_minValue_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		set(
       			$current, 
       			"minValue",
        		lv_minValue_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_7='maxValue' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIntegerFeatureAccess().getMaxValueKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getMaxValueEIntParserRuleCall_6_1_0()); 
	    }
		lv_maxValue_8_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		set(
       			$current, 
       			"maxValue",
        		lv_maxValue_8_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_9='step' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIntegerFeatureAccess().getStepKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getStepEIntParserRuleCall_7_1_0()); 
	    }
		lv_step_10_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		set(
       			$current, 
       			"step",
        		lv_step_10_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_11='dependencies' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIntegerFeatureAccess().getDependenciesKeyword_8_0());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIntegerFeatureAccess().getLeftCurlyBracketKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getDependenciesDependencyParserRuleCall_8_2_0()); 
	    }
		lv_dependencies_13_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_13_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getIntegerFeatureAccess().getCommaKeyword_8_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getDependenciesDependencyParserRuleCall_8_3_1_0()); 
	    }
		lv_dependencies_15_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_15_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getIntegerFeatureAccess().getRightCurlyBracketKeyword_8_4());
    }
)?(	otherlv_17='features' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getIntegerFeatureAccess().getFeaturesKeyword_9_0());
    }
	otherlv_18='{' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getIntegerFeatureAccess().getLeftCurlyBracketKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getFeaturesFeatureParserRuleCall_9_2_0()); 
	    }
		lv_features_19_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_19_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getIntegerFeatureAccess().getCommaKeyword_9_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getFeaturesFeatureParserRuleCall_9_3_1_0()); 
	    }
		lv_features_21_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_21_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getIntegerFeatureAccess().getRightCurlyBracketKeyword_9_4());
    }
)?(	otherlv_23='groups' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getIntegerFeatureAccess().getGroupsKeyword_10_0());
    }
	otherlv_24='{' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getIntegerFeatureAccess().getLeftCurlyBracketKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getGroupsGroupParserRuleCall_10_2_0()); 
	    }
		lv_groups_25_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_25_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getIntegerFeatureAccess().getCommaKeyword_10_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerFeatureAccess().getGroupsGroupParserRuleCall_10_3_1_0()); 
	    }
		lv_groups_27_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_27_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_28='}' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getIntegerFeatureAccess().getRightCurlyBracketKeyword_10_4());
    }
)?	otherlv_29='}' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getIntegerFeatureAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getBaseBinaryDependencyParserRuleCall_0()); 
    }
    this_BaseBinaryDependency_0=ruleBaseBinaryDependency
    { 
        $current = $this_BaseBinaryDependency_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getIsSelectedDependencyParserRuleCall_1()); 
    }
    this_IsSelectedDependency_1=ruleIsSelectedDependency
    { 
        $current = $this_IsSelectedDependency_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getIntegerValueDependencyParserRuleCall_2()); 
    }
    this_IntegerValueDependency_2=ruleIntegerValueDependency
    { 
        $current = $this_IntegerValueDependency_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBaseBinaryDependency
entryRuleBaseBinaryDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseBinaryDependencyRule()); }
	 iv_ruleBaseBinaryDependency=ruleBaseBinaryDependency 
	 { $current=$iv_ruleBaseBinaryDependency.current; } 
	 EOF 
;

// Rule BaseBinaryDependency
ruleBaseBinaryDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseBinaryDependencyAccess().getBinaryNotDependencyParserRuleCall_0()); 
    }
    this_BinaryNotDependency_0=ruleBinaryNotDependency
    { 
        $current = $this_BinaryNotDependency_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseBinaryDependencyAccess().getBinaryDependencyParserRuleCall_1()); 
    }
    this_BinaryDependency_1=ruleBinaryDependency
    { 
        $current = $this_BinaryDependency_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBinaryNotDependency
entryRuleBinaryNotDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryNotDependencyRule()); }
	 iv_ruleBinaryNotDependency=ruleBinaryNotDependency 
	 { $current=$iv_ruleBinaryNotDependency.current; } 
	 EOF 
;

// Rule BinaryNotDependency
ruleBinaryNotDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryNotDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		lv_not_1_0=	'NOT' 
    {
        newLeafNode(lv_not_1_0, grammarAccess.getBinaryNotDependencyAccess().getNotNOTKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinaryNotDependencyRule());
	        }
       		setWithLastConsumed($current, "not", true, "NOT");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinaryNotDependencyAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryNotDependencyAccess().getLeftHandDependencyParserRuleCall_3_0()); 
	    }
		lv_leftHand_3_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryNotDependencyRule());
	        }
       		set(
       			$current, 
       			"leftHand",
        		lv_leftHand_3_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryNotDependencyAccess().getOperatorBinaryOperatorEnumRuleCall_4_0()); 
	    }
		lv_operator_4_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryNotDependencyRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_4_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryNotDependencyAccess().getRightHandDependencyParserRuleCall_5_0()); 
	    }
		lv_rightHand_5_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryNotDependencyRule());
	        }
       		set(
       			$current, 
       			"rightHand",
        		lv_rightHand_5_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryNotDependencyAccess().getRightParenthesisKeyword_6());
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBinaryNotDependencyAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleBinaryDependency
entryRuleBinaryDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryDependencyRule()); }
	 iv_ruleBinaryDependency=ruleBinaryDependency 
	 { $current=$iv_ruleBinaryDependency.current; } 
	 EOF 
;

// Rule BinaryDependency
ruleBinaryDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryDependencyAccess().getLeftHandDependencyParserRuleCall_1_0()); 
	    }
		lv_leftHand_1_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryDependencyRule());
	        }
       		set(
       			$current, 
       			"leftHand",
        		lv_leftHand_1_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryDependencyAccess().getOperatorBinaryOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryDependencyRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryDependencyAccess().getRightHandDependencyParserRuleCall_3_0()); 
	    }
		lv_rightHand_3_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryDependencyRule());
	        }
       		set(
       			$current, 
       			"rightHand",
        		lv_rightHand_3_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryDependencyAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleIsSelectedDependency
entryRuleIsSelectedDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsSelectedDependencyRule()); }
	 iv_ruleIsSelectedDependency=ruleIsSelectedDependency 
	 { $current=$iv_ruleIsSelectedDependency.current; } 
	 EOF 
;

// Rule IsSelectedDependency
ruleIsSelectedDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsSelectedDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsSelectedDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIsSelectedDependencyAccess().getTargetFeatureCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='IS' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIsSelectedDependencyAccess().getISKeyword_2());
    }
(
(
		lv_not_3_0=	'NOT' 
    {
        newLeafNode(lv_not_3_0, grammarAccess.getIsSelectedDependencyAccess().getNotNOTKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsSelectedDependencyRule());
	        }
       		setWithLastConsumed($current, "not", true, "NOT");
	    }

)
)?	otherlv_4='SELECTED' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIsSelectedDependencyAccess().getSELECTEDKeyword_4());
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIsSelectedDependencyAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleIntegerValueDependency
entryRuleIntegerValueDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerValueDependencyRule()); }
	 iv_ruleIntegerValueDependency=ruleIntegerValueDependency 
	 { $current=$iv_ruleIntegerValueDependency.current; } 
	 EOF 
;

// Rule IntegerValueDependency
ruleIntegerValueDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntegerValueDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerValueDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIntegerValueDependencyAccess().getTargetIntegerFeatureCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='IS' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerValueDependencyAccess().getISKeyword_2());
    }
(
(
		lv_not_3_0=	'NOT' 
    {
        newLeafNode(lv_not_3_0, grammarAccess.getIntegerValueDependencyAccess().getNotNOTKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerValueDependencyRule());
	        }
       		setWithLastConsumed($current, "not", true, "NOT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerValueDependencyAccess().getValueEIntParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerValueDependencyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIntegerValueDependencyAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule BinaryOperator
ruleBinaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='OR' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
));



// Rule GroupType
ruleGroupType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Inclusive Group' 
	{
        $current = grammarAccess.getGroupTypeAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGroupTypeAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Exclusive Group' 
	{
        $current = grammarAccess.getGroupTypeAccess().getXOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGroupTypeAccess().getXOREnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


