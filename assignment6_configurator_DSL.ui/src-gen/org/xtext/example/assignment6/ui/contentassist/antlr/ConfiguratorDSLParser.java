/*
 * generated by Xtext
 */
package org.xtext.example.assignment6.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.assignment6.services.ConfiguratorDSLGrammarAccess;

public class ConfiguratorDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private ConfiguratorDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.assignment6.ui.contentassist.antlr.internal.InternalConfiguratorDSLParser createParser() {
		org.xtext.example.assignment6.ui.contentassist.antlr.internal.InternalConfiguratorDSLParser result = new org.xtext.example.assignment6.ui.contentassist.antlr.internal.InternalConfiguratorDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getDependencyAccess().getAlternatives(), "rule__Dependency__Alternatives");
					put(grammarAccess.getBaseBinaryDependencyAccess().getAlternatives(), "rule__BaseBinaryDependency__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getGroupTypeAccess().getAlternatives(), "rule__GroupType__Alternatives");
					put(grammarAccess.getConfiguratorAccess().getGroup(), "rule__Configurator__Group__0");
					put(grammarAccess.getConfiguratorAccess().getGroup_4(), "rule__Configurator__Group_4__0");
					put(grammarAccess.getConfiguratorAccess().getGroup_4_3(), "rule__Configurator__Group_4_3__0");
					put(grammarAccess.getConfiguratorAccess().getGroup_5(), "rule__Configurator__Group_5__0");
					put(grammarAccess.getConfiguratorAccess().getGroup_5_3(), "rule__Configurator__Group_5_3__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getGroupAccess().getGroup_4(), "rule__Group__Group_4__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup(), "rule__SimpleFeature__Group__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_5(), "rule__SimpleFeature__Group_5__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_5_3(), "rule__SimpleFeature__Group_5_3__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_6(), "rule__SimpleFeature__Group_6__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_6_3(), "rule__SimpleFeature__Group_6_3__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_7(), "rule__SimpleFeature__Group_7__0");
					put(grammarAccess.getSimpleFeatureAccess().getGroup_7_3(), "rule__SimpleFeature__Group_7_3__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup(), "rule__IntegerFeature__Group__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_5(), "rule__IntegerFeature__Group_5__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_6(), "rule__IntegerFeature__Group_6__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_7(), "rule__IntegerFeature__Group_7__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_8(), "rule__IntegerFeature__Group_8__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_8_3(), "rule__IntegerFeature__Group_8_3__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_9(), "rule__IntegerFeature__Group_9__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_9_3(), "rule__IntegerFeature__Group_9_3__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_10(), "rule__IntegerFeature__Group_10__0");
					put(grammarAccess.getIntegerFeatureAccess().getGroup_10_3(), "rule__IntegerFeature__Group_10_3__0");
					put(grammarAccess.getBinaryNotDependencyAccess().getGroup(), "rule__BinaryNotDependency__Group__0");
					put(grammarAccess.getBinaryDependencyAccess().getGroup(), "rule__BinaryDependency__Group__0");
					put(grammarAccess.getIsSelectedDependencyAccess().getGroup(), "rule__IsSelectedDependency__Group__0");
					put(grammarAccess.getIntegerValueDependencyAccess().getGroup(), "rule__IntegerValueDependency__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getConfiguratorAccess().getNameAssignment_2(), "rule__Configurator__NameAssignment_2");
					put(grammarAccess.getConfiguratorAccess().getFeaturesAssignment_4_2(), "rule__Configurator__FeaturesAssignment_4_2");
					put(grammarAccess.getConfiguratorAccess().getFeaturesAssignment_4_3_1(), "rule__Configurator__FeaturesAssignment_4_3_1");
					put(grammarAccess.getConfiguratorAccess().getGroupsAssignment_5_2(), "rule__Configurator__GroupsAssignment_5_2");
					put(grammarAccess.getConfiguratorAccess().getGroupsAssignment_5_3_1(), "rule__Configurator__GroupsAssignment_5_3_1");
					put(grammarAccess.getGroupAccess().getGroupTypeAssignment_0(), "rule__Group__GroupTypeAssignment_0");
					put(grammarAccess.getGroupAccess().getNameAssignment_1(), "rule__Group__NameAssignment_1");
					put(grammarAccess.getGroupAccess().getFeaturesAssignment_3(), "rule__Group__FeaturesAssignment_3");
					put(grammarAccess.getGroupAccess().getFeaturesAssignment_4_1(), "rule__Group__FeaturesAssignment_4_1");
					put(grammarAccess.getSimpleFeatureAccess().getMandatoryAssignment_1(), "rule__SimpleFeature__MandatoryAssignment_1");
					put(grammarAccess.getSimpleFeatureAccess().getNameAssignment_3(), "rule__SimpleFeature__NameAssignment_3");
					put(grammarAccess.getSimpleFeatureAccess().getDependenciesAssignment_5_2(), "rule__SimpleFeature__DependenciesAssignment_5_2");
					put(grammarAccess.getSimpleFeatureAccess().getDependenciesAssignment_5_3_1(), "rule__SimpleFeature__DependenciesAssignment_5_3_1");
					put(grammarAccess.getSimpleFeatureAccess().getFeaturesAssignment_6_2(), "rule__SimpleFeature__FeaturesAssignment_6_2");
					put(grammarAccess.getSimpleFeatureAccess().getFeaturesAssignment_6_3_1(), "rule__SimpleFeature__FeaturesAssignment_6_3_1");
					put(grammarAccess.getSimpleFeatureAccess().getGroupsAssignment_7_2(), "rule__SimpleFeature__GroupsAssignment_7_2");
					put(grammarAccess.getSimpleFeatureAccess().getGroupsAssignment_7_3_1(), "rule__SimpleFeature__GroupsAssignment_7_3_1");
					put(grammarAccess.getIntegerFeatureAccess().getMandatoryAssignment_1(), "rule__IntegerFeature__MandatoryAssignment_1");
					put(grammarAccess.getIntegerFeatureAccess().getNameAssignment_3(), "rule__IntegerFeature__NameAssignment_3");
					put(grammarAccess.getIntegerFeatureAccess().getMinValueAssignment_5_1(), "rule__IntegerFeature__MinValueAssignment_5_1");
					put(grammarAccess.getIntegerFeatureAccess().getMaxValueAssignment_6_1(), "rule__IntegerFeature__MaxValueAssignment_6_1");
					put(grammarAccess.getIntegerFeatureAccess().getStepAssignment_7_1(), "rule__IntegerFeature__StepAssignment_7_1");
					put(grammarAccess.getIntegerFeatureAccess().getDependenciesAssignment_8_2(), "rule__IntegerFeature__DependenciesAssignment_8_2");
					put(grammarAccess.getIntegerFeatureAccess().getDependenciesAssignment_8_3_1(), "rule__IntegerFeature__DependenciesAssignment_8_3_1");
					put(grammarAccess.getIntegerFeatureAccess().getFeaturesAssignment_9_2(), "rule__IntegerFeature__FeaturesAssignment_9_2");
					put(grammarAccess.getIntegerFeatureAccess().getFeaturesAssignment_9_3_1(), "rule__IntegerFeature__FeaturesAssignment_9_3_1");
					put(grammarAccess.getIntegerFeatureAccess().getGroupsAssignment_10_2(), "rule__IntegerFeature__GroupsAssignment_10_2");
					put(grammarAccess.getIntegerFeatureAccess().getGroupsAssignment_10_3_1(), "rule__IntegerFeature__GroupsAssignment_10_3_1");
					put(grammarAccess.getBinaryNotDependencyAccess().getNotAssignment_1(), "rule__BinaryNotDependency__NotAssignment_1");
					put(grammarAccess.getBinaryNotDependencyAccess().getLeftHandAssignment_3(), "rule__BinaryNotDependency__LeftHandAssignment_3");
					put(grammarAccess.getBinaryNotDependencyAccess().getOperatorAssignment_4(), "rule__BinaryNotDependency__OperatorAssignment_4");
					put(grammarAccess.getBinaryNotDependencyAccess().getRightHandAssignment_5(), "rule__BinaryNotDependency__RightHandAssignment_5");
					put(grammarAccess.getBinaryDependencyAccess().getLeftHandAssignment_1(), "rule__BinaryDependency__LeftHandAssignment_1");
					put(grammarAccess.getBinaryDependencyAccess().getOperatorAssignment_2(), "rule__BinaryDependency__OperatorAssignment_2");
					put(grammarAccess.getBinaryDependencyAccess().getRightHandAssignment_3(), "rule__BinaryDependency__RightHandAssignment_3");
					put(grammarAccess.getIsSelectedDependencyAccess().getTargetAssignment_1(), "rule__IsSelectedDependency__TargetAssignment_1");
					put(grammarAccess.getIsSelectedDependencyAccess().getNotAssignment_3(), "rule__IsSelectedDependency__NotAssignment_3");
					put(grammarAccess.getIntegerValueDependencyAccess().getTargetAssignment_1(), "rule__IntegerValueDependency__TargetAssignment_1");
					put(grammarAccess.getIntegerValueDependencyAccess().getNotAssignment_3(), "rule__IntegerValueDependency__NotAssignment_3");
					put(grammarAccess.getIntegerValueDependencyAccess().getValueAssignment_4(), "rule__IntegerValueDependency__ValueAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.assignment6.ui.contentassist.antlr.internal.InternalConfiguratorDSLParser typedParser = (org.xtext.example.assignment6.ui.contentassist.antlr.internal.InternalConfiguratorDSLParser) parser;
			typedParser.entryRuleConfigurator();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConfiguratorDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConfiguratorDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
